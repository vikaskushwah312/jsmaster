Objects
    Objects, in JavaScript, is the most important data-type and forms the building blocks for modern JavaScript.
    Objects are more complex and each object may contain any combination of these primitive data-types as well as reference data-types.
    or
    objects in JavaScript may be defined as an unordered collection of related data, of primitive or reference types, in the form of “key: value” pairs. 

Object -> Basics
    Dot notation
        person.age
    Bracket notation
        person['age']
    Setting object members
        person.age = 45;
        person['name']['last'] = 'Cratchit';
        person.farewell = function() {
            console.log('Bye everybody!');
        }
    
    Dirrence between Dot and Bracket notation
        const myDataName = nameInput.value;
        const myDataValue = nameValue.value;
        person[myDataName] = myDataValue;

    What is "this"?
        The this keyword refers to the current object the code is being written inside
    
    Introducing constructors
        function Person(name) {
            this.name = name;
            this.introduceSelf = function() {
                console.log(`Hi! I'm ${this.name}.`);
            }
        }
        const frankie = new Person('Frankie');

Object prototypes
        Every object in JavaScript has a built-in property, which is called its prototype.
        Prototypes are the mechanism by which JavaScript objects inherit features from one another.
        The standard way to access an object's prototype is the Object.getPrototypeOf() method.

        When you try to access a property of an object:
        if the property can't be found in the object itself, the prototype is searched for the property. 
        If the property still can't be found, then the prototype's prototype is searched, 
        and so on until either the property is found, or the end of the chain is reached, in which case undefined is returned

    The prototype chain
        Every object in JavaScript has a built-in property, which is called its prototype.
        The prototype is itself an object, so the prototype will have its own prototype, making what's called a prototype chain.

    Shadowing properties
        some method in object property and prototype have

    Setting a prototype
        There are various ways of setting an object's prototype in JavaScript, and here we'll describe two: 
            a. Object.create().
            b. constructors.
	
	Using the Object.create() Method
        const personPrototype = {
            greet() {
                console.log("hello!");
            },
        };

        const carl = Object.create(personPrototype);
        carl.greet(); // hello!
    Using a constructor

Object-oriented_programming
    Classes and instances

Classes in JavaScript
        


